//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Angular_MVC.TaskServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskDataContract", Namespace="http://schemas.datacontract.org/2004/07/TaskList_Service")]
    [System.SerializableAttribute()]
    public partial class TaskDataContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskID {
            get {
                return this.TaskIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskIDField, value) != true)) {
                    this.TaskIDField = value;
                    this.RaisePropertyChanged("TaskID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaskServiceReference.ITaskService")]
    public interface ITaskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetAllTask", ReplyAction="http://tempuri.org/ITaskService/GetAllTaskResponse")]
        Angular_MVC.TaskServiceReference.TaskDataContract[] GetAllTask();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetAllTask", ReplyAction="http://tempuri.org/ITaskService/GetAllTaskResponse")]
        System.Threading.Tasks.Task<Angular_MVC.TaskServiceReference.TaskDataContract[]> GetAllTaskAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetTaskDetails", ReplyAction="http://tempuri.org/ITaskService/GetTaskDetailsResponse")]
        Angular_MVC.TaskServiceReference.TaskDataContract GetTaskDetails(string TaskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetTaskDetails", ReplyAction="http://tempuri.org/ITaskService/GetTaskDetailsResponse")]
        System.Threading.Tasks.Task<Angular_MVC.TaskServiceReference.TaskDataContract> GetTaskDetailsAsync(string TaskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AddNewTask", ReplyAction="http://tempuri.org/ITaskService/AddNewTaskResponse")]
        bool AddNewTask(Angular_MVC.TaskServiceReference.TaskDataContract task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AddNewTask", ReplyAction="http://tempuri.org/ITaskService/AddNewTaskResponse")]
        System.Threading.Tasks.Task<bool> AddNewTaskAsync(Angular_MVC.TaskServiceReference.TaskDataContract task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/UpdateTask", ReplyAction="http://tempuri.org/ITaskService/UpdateTaskResponse")]
        void UpdateTask(Angular_MVC.TaskServiceReference.TaskDataContract contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/UpdateTask", ReplyAction="http://tempuri.org/ITaskService/UpdateTaskResponse")]
        System.Threading.Tasks.Task UpdateTaskAsync(Angular_MVC.TaskServiceReference.TaskDataContract contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/DeleteTask", ReplyAction="http://tempuri.org/ITaskService/DeleteTaskResponse")]
        void DeleteTask(string TaskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/DeleteTask", ReplyAction="http://tempuri.org/ITaskService/DeleteTaskResponse")]
        System.Threading.Tasks.Task DeleteTaskAsync(string TaskId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskServiceChannel : Angular_MVC.TaskServiceReference.ITaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskServiceClient : System.ServiceModel.ClientBase<Angular_MVC.TaskServiceReference.ITaskService>, Angular_MVC.TaskServiceReference.ITaskService {
        
        public TaskServiceClient() {
        }
        
        public TaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Angular_MVC.TaskServiceReference.TaskDataContract[] GetAllTask() {
            return base.Channel.GetAllTask();
        }
        
        public System.Threading.Tasks.Task<Angular_MVC.TaskServiceReference.TaskDataContract[]> GetAllTaskAsync() {
            return base.Channel.GetAllTaskAsync();
        }
        
        public Angular_MVC.TaskServiceReference.TaskDataContract GetTaskDetails(string TaskId) {
            return base.Channel.GetTaskDetails(TaskId);
        }
        
        public System.Threading.Tasks.Task<Angular_MVC.TaskServiceReference.TaskDataContract> GetTaskDetailsAsync(string TaskId) {
            return base.Channel.GetTaskDetailsAsync(TaskId);
        }
        
        public bool AddNewTask(Angular_MVC.TaskServiceReference.TaskDataContract task) {
            return base.Channel.AddNewTask(task);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewTaskAsync(Angular_MVC.TaskServiceReference.TaskDataContract task) {
            return base.Channel.AddNewTaskAsync(task);
        }
        
        public void UpdateTask(Angular_MVC.TaskServiceReference.TaskDataContract contact) {
            base.Channel.UpdateTask(contact);
        }
        
        public System.Threading.Tasks.Task UpdateTaskAsync(Angular_MVC.TaskServiceReference.TaskDataContract contact) {
            return base.Channel.UpdateTaskAsync(contact);
        }
        
        public void DeleteTask(string TaskId) {
            base.Channel.DeleteTask(TaskId);
        }
        
        public System.Threading.Tasks.Task DeleteTaskAsync(string TaskId) {
            return base.Channel.DeleteTaskAsync(TaskId);
        }
    }
}
